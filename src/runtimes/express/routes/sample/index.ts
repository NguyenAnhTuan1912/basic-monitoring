// Import from cores
import { jsonResponse } from "src/core/docs/swagger/helpers";
import { SwaggerSchema } from "src/core/docs/swagger/SwaggerSchema";

// Import pipelines
import {
  predictFuturePipeline,
  rateCodePipeline,
  motivateDevPipeline,
  catTranslatorPipeline,
  shouldDeployPipeline,
} from "src/core/modules/sample/ports";

// Import from runtimes
import { ExpressRuntimeContext } from "src/runtimes/express/adapters/context";

// Import types
import type { TSwaggerRouteDefinition } from "src/core/docs/swagger/type";

// Tag for Swagger UI grouping
export const sampleTag = "Fun sample routes";

/**
 * C√°c route vui v·∫ª d√†nh cho dev üòÜ
 */
export const sampleRoutes: Array<TSwaggerRouteDefinition> = [
  // üßô‚Äç‚ôÇÔ∏è Predict future
  {
    method: "get",
    path: "/sample/predict-future",
    handler: async (req, res, next) => {
      const ctx = new ExpressRuntimeContext(req, res, next);
      return await predictFuturePipeline.run(ctx);
    },
    summary: "D·ª± ƒëo√°n t∆∞∆°ng lai cho dev üßô‚Äç‚ôÇÔ∏è",
    description: "Tr·∫£ v·ªÅ m·ªôt l·ªùi ti√™n tri 'vui v·∫ª' d√†nh cho l·∫≠p tr√¨nh vi√™n.",
    tags: [sampleTag],
    parameters: [],
    responses: {
      ...jsonResponse(
        "200",
        new SwaggerSchema()
          .setType("object")
          .addProperty("data", new SwaggerSchema("string")),
      ),
    },
  },

  // üí© Rate code
  {
    method: "post",
    path: "/sample/rate-code",
    handler: async (req, res, next) => {
      const ctx = new ExpressRuntimeContext(req, res, next);
      return await rateCodePipeline.run(ctx);
    },
    summary: "ƒê√°nh gi√° code üí©",
    description:
      "G·ª≠i ƒëo·∫°n code trong body ƒë·ªÉ nh·∫≠n ƒë√°nh gi√° 'ch√¢n th·∫≠t' t·ª´ pipeline AI (h∆°i troll).",
    tags: [sampleTag],
    requestBody: {
      required: true,
      content: {
        "application/json": {
          schema: new SwaggerSchema()
            .setType("object")
            .addProperty("code", new SwaggerSchema("string")),
        },
      },
    },
    responses: {
      ...jsonResponse(
        "200",
        new SwaggerSchema()
          .setType("object")
          .addProperty("data", new SwaggerSchema("string")),
      ),
    },
  },

  // üí™ Motivate developer
  {
    method: "get",
    path: "/sample/motivate-dev",
    handler: async (req, res, next) => {
      const ctx = new ExpressRuntimeContext(req, res, next);
      return await motivateDevPipeline.run(ctx);
    },
    summary: "ƒê·ªông vi√™n dev üí™",
    description:
      "Nh·∫≠p t√™n dev qua query `name` ƒë·ªÉ nh·∫≠n m·ªôt c√¢u ƒë·ªông vi√™n tinh th·∫ßn.",
    tags: [sampleTag],
    parameters: [
      {
        name: "name",
        in: "query",
        required: false,
        schema: new SwaggerSchema().setType("string"),
        description: "T√™n c·ªßa dev (optional)",
      },
    ],
    responses: {
      ...jsonResponse(
        "200",
        new SwaggerSchema()
          .setType("object")
          .addProperty("data", new SwaggerSchema("string")),
      ),
    },
  },

  // üê± Cat translator
  {
    method: "post",
    path: "/sample/to-meow",
    handler: async (req, res, next) => {
      const ctx = new ExpressRuntimeContext(req, res, next);
      return await catTranslatorPipeline.run(ctx);
    },
    summary: "D·ªãch sang ti·∫øng m√®o üê±",
    description: "Truy·ªÅn message trong body ƒë·ªÉ d·ªãch sang 'meow'.",
    tags: [sampleTag],
    requestBody: {
      required: true,
      content: {
        "application/json": {
          schema: new SwaggerSchema()
            .setType("object")
            .addProperty("message", new SwaggerSchema("string")),
        },
      },
    },
    responses: {
      ...jsonResponse(
        "200",
        new SwaggerSchema()
          .setType("object")
          .addProperty("data", new SwaggerSchema("string")),
      ),
    },
  },

  // üöÄ Should deploy today?
  {
    method: "get",
    path: "/sample/should-deploy",
    handler: async (req, res, next) => {
      const ctx = new ExpressRuntimeContext(req, res, next);
      return await shouldDeployPipeline.run(ctx);
    },
    summary: "H√¥m nay c√≥ n√™n deploy kh√¥ng? üöÄ",
    description:
      "ƒê∆∞a ra quy·∫øt ƒë·ªãnh 'vui' xem h√¥m nay c√≥ n√™n deploy hay kh√¥ng (r·∫•t thi·∫øu c∆° s·ªü khoa h·ªçc).",
    tags: [sampleTag],
    parameters: [],
    responses: {
      ...jsonResponse(
        "200",
        new SwaggerSchema()
          .setType("object")
          .addProperty("data", new SwaggerSchema("string")),
      ),
    },
  },
];
